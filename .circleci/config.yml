version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  aws-eks: circleci/aws-eks@1.0.0
  aws-cli: circleci/aws-cli@1.3.0

terraform: &terraform
  working_directory: ~/repo
  docker:
    - image: hashicorp/terraform:0.12.29
  environment:
    TF_IN_AUTOMATION: true
    TF_VAR_AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    TF_VAR_AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
    TF_VAR_AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    BASH: true

jobs:
  terraform-init:
    <<: *terraform
    steps:
      - checkout
      - run:
          name: Terraform Init
          command: terraform init
      - persist_to_workspace:
          root: ~/repo
          paths: .

  terraform-plan:
    <<: *terraform
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Terraform Plan
          command: terraform plan -lock-timeout=300s
      - persist_to_workspace:
          root: ~/repo
          paths: .
      - run:
          name: Enabling bash
          command: apk add bash curl
      - slack/approval:
          mentions: "William Munoz"
          url: 'https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}'
      - store_artifacts:
          path: ~/repo/tfplan
          destination: tfplan

  terraform-apply:
    <<: *terraform
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Terraform Apply
          command: terraform apply -auto-approve
      - run:
          name: Terraform Show
          command: terraform show -no-color > tfresult
      - run:
          name: Enabling bash
          command: apk add bash curl
      - slack/notify:
          color: "#42e2f4"
          mentions: "William Munoz"
          message: Terraform AWS EKS was deployed
      - slack/status:
          fail_only: true
          mentions: "William Munoz"
      - store_artifacts:
          path: ~/repo/tfresult
          destination: tfresult   
          
  external-dns:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: ~/repo
      - aws-cli/setup:
          profile-name: default
      - run: 
          name: Create Hosted Zone on AWS Route53
          command: aws route53 create-hosted-zone --name "eks.kubernetesops.com." --caller-reference "eks-$(date +%s)"

  iam-role-for-serviceaccount:
    executor: aws-eks/python3
    steps:
      - attach_workspace:
          at: ~/repo
      - aws-eks/install-eksctl
      - run:
          name: Create IAM Role for ServiceAccount
          command: |
            eksctl create iamserviceaccount \
            --name external-dns \
            --namespace kube-system \
            --cluster eks-cluster
            --attach-policy-arn arn:aws:iam::$AWS_ACCOUNT_ID:policy/eks-external-dns-policy \
            --approve

  terraform-destroy:
    <<: *terraform
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Terraform Destroy
          command: terraform destroy -auto-approve
      - run:
          name: Enabling bash
          command: apk add bash curl
      - slack/notify:
          color: "#42e2f4"
          mentions: "William Munoz"
          message: Terraform AWS EKS was destroyed
      - slack/status:
          fail_only: true
          mentions: "William Munoz"

workflows:
  version: 2
  build_deploy:
    jobs:
      - terraform-init
      - terraform-plan:
          requires:
            - terraform-init
      - hold-for-approval:
          type: approval
          requires:
            - terraform-plan
      - terraform-apply:
          requires:
            - hold-for-approval
          filters:
            branches:
              only:
                - master
      - terraform-destroy:
          requires:
            - hold-for-approval
          filters:
            branches:
              only:
                - destroy
      - external-dns:
          requires:
            - terraform-apply
          filters:
            branches:
              only:
                - master
      - iam-role-for-serviceaccount:
          requires:
            - external-dns
